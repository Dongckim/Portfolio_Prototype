{"componentChunkName":"component---src-templates-blog-template-js","path":"/ios-enum/","result":{"data":{"cur":{"id":"777e34eb-abcf-58dd-8922-3f693ed6efa6","html":"<h2 id=\"열거형enumerations\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95enumerations\" aria-label=\"열거형enumerations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형(Enumerations)</h2>\n<p>타입 자체를 한정된 사례(case)안에서 정의할 수 있는 타입</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> monday\n    <span class=\"token keyword\">case</span> tuesday\n    <span class=\"token keyword\">case</span> wednesday\n    <span class=\"token keyword\">case</span> thursday\n    <span class=\"token keyword\">case</span> friday\n    <span class=\"token keyword\">case</span> saturday\n    <span class=\"token keyword\">case</span> sunday\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">CompassPoint</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> north<span class=\"token punctuation\">,</span> south<span class=\"token punctuation\">,</span> east<span class=\"token punctuation\">,</span> west\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><strong>한정된 사례(정해진 갯수) 안에서 정의할 수 있을때</strong></p>\n<ul>\n<li>월 / 화 / 수 / 목 / 금 / 토 / 일</li>\n<li>동 / 서 / 남 / 북</li>\n<li>좌로 정렬 / 가운데 정렬 / 우측 정렬</li>\n<li>초등학교 / 중학교 / 고등학교 / 대학교</li>\n<li>남 / 여</li>\n<li>가위 / 바위 / 보</li>\n</ul>\n<p>열거형을 사용하면 코드의 가독성과 안정성이 높아짐 ===> 명확한 분기 처리 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> today<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Weekday</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span>monday\n\ntoday <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>tuesday\n\n\n\n\n<span class=\"token comment\">// 일요일인 경우만 특정한 처리를 하고 싶을때</span>\n\n<span class=\"token keyword\">if</span> today <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>sunday <span class=\"token punctuation\">{</span>\n   \n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 모든 각각의 경우를 처리하고 싶을때</span>\n\n<span class=\"token keyword\">if</span> today <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>monday <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 월요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> today <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>tuesday <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 화요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> today <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>wednesday<span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 수요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> today <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>thursday<span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 목요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> today <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>friday<span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 금요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> today <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>saturday<span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 토요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 일요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**=====================================**/</span>\n\n<span class=\"token comment\">//항상 switch문과 연결해서 사용됨</span>\n\n<span class=\"token keyword\">switch</span> today <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>monday<span class=\"token punctuation\">:</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 월요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>tuesday<span class=\"token punctuation\">:</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 화요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>wednesday<span class=\"token punctuation\">:</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 수요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>thursday<span class=\"token punctuation\">:</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 목요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>friday<span class=\"token punctuation\">:</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 금요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>saturday<span class=\"token punctuation\">:</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 토요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>sunday<span class=\"token punctuation\">:</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오늘은 일요일입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"열거형의-원시값과-연관값\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%98-%EC%9B%90%EC%8B%9C%EA%B0%92%EA%B3%BC-%EC%97%B0%EA%B4%80%EA%B0%92\" aria-label=\"열거형의 원시값과 연관값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형의 원시값과 연관값</h3>\n<p>열거형의 원시값은 매칭되는 기본값(정수/문자열)을 정해, 열거형을 좀 더 쉽게 활용 가능 → Int나 String 형태가 보통 많이 쓰이긴 한다.</p>\n<ul>\n<li>원시값 입력안하면 0, 1, 2  이렇게 자동으로 저장됨 (정수의 경우 숫자가 하나씩 증가)</li>\n<li>1(설정시), 2, 3</li>\n<li>0, 2(설정시), 3</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Alignment1</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">left</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"L\"</span></span>\n    <span class=\"token keyword\">case</span> center <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">right</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"R\"</span></span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> align <span class=\"token operator\">=</span> <span class=\"token class-name\">Alignment</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 인스턴스 생성시 - 옵셔널타입으로 리턴 (실패가능)</span>\n<span class=\"token keyword\">let</span> leftValue <span class=\"token operator\">=</span> <span class=\"token class-name\">Alignment</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>rawValue    <span class=\"token comment\">// 접근연산자를 통해 원시값 자체에도 접근가능</span>\n\n\n\n<span class=\"token class-name\">Alignment1</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// (가능하지만) 문자열 방식으로는 잘 사용하지는 않음</span>\n<span class=\"token keyword\">let</span> centerValue <span class=\"token operator\">=</span> <span class=\"token class-name\">Alignment1</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>rawValue\n</code></pre></div>\n<h3 id=\"원시값의-활용\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92%EC%9D%98-%ED%99%9C%EC%9A%A9\" aria-label=\"원시값의 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시값의 활용</h3>\n<p>숫자 또는 문자열과 매칭시켜 자유롭게 활용 가능 (숫자 ←→ 열거형 타입)</p>\n<ul>\n<li>논리적으로 nil이 될 수 없다면, 출력은 하지만 문자열은 아님에 주의</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">RpsGame</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> rock\n    <span class=\"token keyword\">case</span> paper\n    <span class=\"token keyword\">case</span> scissors\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">RpsGame</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n<span class=\"token class-name\">RpsGame</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">RpsGame</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> \n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RpsGame</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 출력은 하지만 문자열은 아님에 주의</span>\n\n\n\n\n<span class=\"token comment\">// 옵셔널값을 벗겨서 사용</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token class-name\">RpsGame</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 출력은 하지만 문자열은 아님에 주의</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>여기서도 optional 값 조심해서 벗겨서 활용하기</li>\n</ul>\n<br/>\n<h3 id=\"열거형의-연관값-associated-values\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%98-%EC%97%B0%EA%B4%80%EA%B0%92-associated-values\" aria-label=\"열거형의 연관값 associated values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형의 연관값 (Associated Values)</h3>\n<p>열거형의 연관값은 구체적인 추가정보를 저장하기 위해 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Computer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">ram</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>gb<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myChip1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> myChip2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> myChip3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">ram</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"DRAM\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> myChip4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">ram</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"SRAM\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> myChip5 <span class=\"token operator\">=</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">ram</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"DRAM\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> myChip6 <span class=\"token operator\">=</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>gb<span class=\"token punctuation\">:</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> myChip7 <span class=\"token operator\">=</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>gb<span class=\"token punctuation\">:</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>각 케이스별로 상이한 특징이 있고, 그것을 저장 / 활용할 필요가 있을 때</p>\n<ul>\n<li>개별케이스마다 저장할 형식을 따로 정의(자료형에 제한이 없음 / 튜플의 형태)</li>\n<li>하나의 케이스에 서로다른 연관값을 저장할 수 있음 ===> 선언시점이 아니라, 새로운 열거형 값을 생성할때 저장</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">switch</span> chip <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> <span class=\"token number\">3.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"CPU 8코어 3.1GHz입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> <span class=\"token number\">2.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"CPU 8코어 2.6GHz입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">ram</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"32기가램 입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"그 이외의 칩에는 관심이 없습니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 연관값을 가진 케이스를 패턴 매칭시키기</span>\n\n\n<span class=\"token keyword\">switch</span> chip <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\">// let a = 연관값, let b = 연관값</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"CPU </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">a</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">코어 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">b</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">GHz입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">ram</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"램 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">a</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">기가램 입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"하드디스크 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">a</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">기가 용량입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"원시값raw-values과-연관값associated-values의-차이\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92raw-values%EA%B3%BC-%EC%97%B0%EA%B4%80%EA%B0%92associated-values%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"원시값raw values과 연관값associated values의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시값(Raw Values)과 연관값(Associated Values)의 차이</h3>\n<ol>\n<li>자료형 선언 방식: 선언하는 위치가 다름</li>\n<li>선언 형식: (1) 원시값 ===> 2가지중 1가지 선택(Int, String) / (2)연관값 ===> 튜플의 형태로 형식 제한 없음</li>\n<li>값의 저장 시점: (원시값: 선언시점 / 연관값: 새로운 열거형 값을 생성할때 )</li>\n<li>서로 배타적: 하나의 열거형에서 원시값과 연관값을 함께 사용하는 것은 불가능 함</li>\n</ol>\n <br/>\n<h3 id=\"열거형과-switch문\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-switch%EB%AC%B8\" aria-label=\"열거형과 switch문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형과 switch문</h3>\n<p>열거형에 대한 구체적인 처리는 스위치(switch)문과 함께 쓸 때, 사용성이 높아짐.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 로그인 타입을 정의</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">LoginProvider</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\">// 3가지로 정의</span>\n    <span class=\"token keyword\">case</span> email\n    <span class=\"token keyword\">case</span> facebook\n    <span class=\"token keyword\">case</span> google\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> userLogin <span class=\"token operator\">=</span> <span class=\"token class-name\">LoginProvider</span><span class=\"token punctuation\">.</span>facebook\n\n\n<span class=\"token comment\">// 열거형은 한정된 사례로 만든 타입이고,</span>\n<span class=\"token comment\">// 스위치문은 표현식에 대한 분기처리에 최적화</span>\n\n<span class=\"token keyword\">switch</span> userLogin <span class=\"token punctuation\">{</span>                   <span class=\"token comment\">// 3가지로 분기처리</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"이메일 로그인\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>facebook<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"페이스북 로그인\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"구글 로그인\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 물론 특정한 경우도 처리 가능</span>\n<span class=\"token keyword\">if</span> <span class=\"token class-name\">LoginProvider</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">==</span> userLogin <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"이메일 로그인\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"옵셔널-타입에-대한-정확한-이해\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%83%80%EC%9E%85%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%ED%99%95%ED%95%9C-%EC%9D%B4%ED%95%B4\" aria-label=\"옵셔널 타입에 대한 정확한 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 타입에 대한 정확한 이해</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Optional</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Wrapped</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// 제네릭 문법</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapped</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">none</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span>  <span class=\"token comment\">// 열거형(한정된 사례)</span>\n<span class=\"token comment\">//Optional.some(7)</span>\n<span class=\"token comment\">//Optional.none</span></code></pre></div>\n<ul>\n<li>열거형 case 패턴을 활용해서, 내부 연관값을 꺼냄</li>\n<li>print(num!) 아니면 이런식으로 꺼내 써야함.</li>\n<li>.none과 nil은 완전히 동일 ===> .none은 명시적인 열거형으로 표현한 것이고, 일반적으로는 값이 없다는 의미의 nil키워드를 사용할뿐</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">switch</span> num <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">// let a = 7 </span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"nil\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">switch</span> num <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"nil\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>옵셔널에서는 에러가 나지 않도록 Enum(임시적인) 타입을 담아주는 개념이다.</li>\n</ul>\n<h3 id=\"열거형에-연관값이-없고-옵셔널-열거형일-경우\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%97%90-%EC%97%B0%EA%B4%80%EA%B0%92%EC%9D%B4-%EC%97%86%EA%B3%A0-%EC%98%B5%EC%85%94%EB%84%90-%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%BC-%EA%B2%BD%EC%9A%B0\" aria-label=\"열거형에 연관값이 없고 옵셔널 열거형일 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형에 (연관값이 없고), 옵셔널 열거형일 경우</h3>\n<p>switch문의 편의성 (열거형 case 패턴) - Enumeration Case Pattern</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">SomeEnum</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">left</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">right</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 타입을 다시 옵셔널 열거형으로 선언한다며?</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SomeEnum</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">left</span></code></pre></div>\n<p><strong>SomeEnum?의 의미</strong> [옵셔널 열거형]</p>\n<ul>\n<li>값이 있는 경우 .some ===> 내부에 다시 열거형 (1).left / (2).right</li>\n<li>값이 없는 경우 .none ===> nil</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 원칙 ===> 이거 말고</span>\n<span class=\"token keyword\">switch</span> x <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\">// Optional.some(let value) = Optional.some(SomeEnum.left)  ⭐️</span>\n    <span class=\"token keyword\">switch</span> value <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">left</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"왼쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">right</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오른쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"계속 전진\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 편의적 기능 제공 ===> 이렇게 처리됨!!</span>\n<span class=\"token keyword\">switch</span> x <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">left</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"왼쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오른쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"계속 전진\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"스위치문의-편의성\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%9C%84%EC%B9%98%EB%AC%B8%EC%9D%98-%ED%8E%B8%EC%9D%98%EC%84%B1\" aria-label=\"스위치문의 편의성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스위치문의 편의성</h3>\n<p>switch문에서 옵셔널 열거형 타입을 사용할때, 벗기지 않아도 내부값 접근가능</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">switch</span> x <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// 예전에는 x! 라고 써줘야 했음 (스위치문에서 옵셔널 타입도 ok)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">left</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"왼쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">right</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"오른쪽으로 돌기\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"계속 전진\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"열거형에-연관값이-있는-경우\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%97%90-%EC%97%B0%EA%B4%80%EA%B0%92%EC%9D%B4-%EC%9E%88%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"열거형에 연관값이 있는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형에 연관값이 있는 경우</h3>\n<p>연관값(Associated Values)이 있는 경우와 switch문 (열거형 case 패턴) - Enumeration Case Pattern</p>\n<ul>\n<li>연관값이 있는 열거형의 활용 (열거형 case 패턴)</li>\n<li>구체적 정보(연관값)를 변수에 바인딩(let/var가능)하는 패턴</li>\n</ul>\n<blockquote>\n<p>열거형 case 패턴</p>\n<ul>\n<li>case Enum.case(let 변수이름):</li>\n<li>case let Enum.case(변수이름):</li>\n</ul>\n</blockquote>\n<p>스위치문 뿐만 아니라, 조건문/반복문에서도 활용가능\nswitch문 (대부분) / if / guard / for-in / while (필요한 경우)</p>\n<br/>\n<h3 id=\"연관값associated-values이-있는-경우-if--guard--for-in--while-문-열거형-case-패턴\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B4%80%EA%B0%92associated-values%EC%9D%B4-%EC%9E%88%EB%8A%94-%EA%B2%BD%EC%9A%B0-if--guard--for-in--while-%EB%AC%B8-%EC%97%B4%EA%B1%B0%ED%98%95-case-%ED%8C%A8%ED%84%B4\" aria-label=\"연관값associated values이 있는 경우 if  guard  for in  while 문 열거형 case 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연관값(Associated Values)이 있는 경우 if / guard / for-in / while 문 (열거형 case 패턴)</h3>\n<p>값 하나를 사용하기 위해서, 스위치문을 전체를 다 써야하는 불편함이 있었음\n→ 특정 케이스만 다루기 위해서 if문이나 반복문(for문) 사용 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">chip <span class=\"token operator\">=</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>gb<span class=\"token punctuation\">:</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 256</span>\n\n<span class=\"token comment\">// if문에서도 스위치문에서 사용하는 case문과 같이 사용 가능</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">case</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>gb<span class=\"token punctuation\">:</span> <span class=\"token keyword\">let</span> gB<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> chip <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">gB</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">기가 바이트 하드디스크임\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">case</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>gb<span class=\"token punctuation\">:</span> <span class=\"token keyword\">let</span> gB<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> chip<span class=\"token punctuation\">,</span> gB <span class=\"token operator\">==</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 처리를 다양하게 활용 가능</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"256기가 바이트 하드디스크임\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//for문</span>\n<span class=\"token keyword\">let</span> chiplists<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Computer</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ram</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"SRAM\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ram</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"DRAM\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>gb<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">hardDisk</span><span class=\"token punctuation\">(</span>gb<span class=\"token punctuation\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">cpu</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">,</span> ghz<span class=\"token punctuation\">:</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> chiplists <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 배열중에서 특정 케이스만 뽑아서 활용 가능 ⭐️</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"CPU칩: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">c</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">코어, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">h</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">헤르츠\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 일반 for문과 비교 =====> 모든 경우</span>\n<span class=\"token keyword\">for</span> chip <span class=\"token keyword\">in</span> chiplists <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">chip</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 옵셔널 타입을 포함하는 배열에서 반복문을 사용하는 경우</span>\n<span class=\"token keyword\">let</span> arrays<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> arrays <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Found a </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"옵셔널-패턴optional-pattern\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%8C%A8%ED%84%B4optional-pattern\" aria-label=\"옵셔널 패턴optional pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 패턴(Optional Pattern)</h3>\n<p>옵셔널 타입에서 열거형 케이스 패턴을 더 간소화한 옵셔널 패턴(Optional Pattern)\n→ 열거형 내부에 “연관값”을 사용시</p>\n<ol>\n<li>열거형 케이스 패턴</li>\n<li>옵셔널 패턴</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 1) 열거형 케이스 패턴 (앞에서 배운)</span>\n\n<span class=\"token keyword\">switch</span> a <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">// nil이라고 써도됨</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"nil\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 2) 옵셔널 패턴</span>\n\n<span class=\"token keyword\">switch</span> a <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> z<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\">// .some을 조금 더 간소화하는 문법</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">:</span>         <span class=\"token comment\">// .none 이라고 써도됨</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"nil\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"if문에서도\" style=\"position:relative;\"><a href=\"#if%EB%AC%B8%EC%97%90%EC%84%9C%EB%8F%84\" aria-label=\"if문에서도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If문에서도?</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> num <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//옵셔널 패턴 (.some을 ? 물음표로 대체 가능한 패턴)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> x<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> num <span class=\"token punctuation\">{</span>        <span class=\"token comment\">// \"옵셔널(?) 물음표를 띄어내고, x 상수로 보자\"의 의미라고 생각하면 됨</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"for문에서도\" style=\"position:relative;\"><a href=\"#for%EB%AC%B8%EC%97%90%EC%84%9C%EB%8F%84\" aria-label=\"for문에서도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For문에서도?</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 옵셔널 타입을 포함하는 배열에서 반복문을 사용하는 경우, 옵셔널 패턴을 사용하면 편리함</span>\n<span class=\"token keyword\">let</span> arrays<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\">// 1) 열거형 케이스 패턴</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> arrays <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Found a </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 2) 옵셔널 패턴</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> number<span class=\"token operator\">?</span> <span class=\"token keyword\">in</span> arrays <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Found a </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h2 id=\"unknown-키워드\" style=\"position:relative;\"><a href=\"#unknown-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"unknown 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Unknown 키워드</h2>\n<p>만약, 열거형의 케이스가 늘어난다면 항상 올바른 처리를 하고 있다고 말할 수 있을까?\n<br/> => 처리하는 로직이 항상 옳다는 보장을 하지 못함</p>\n<ul>\n<li>@unknown 키워드를 default블럭에 추가해둠</li>\n<li>switch문에서 열거형의 모든 케이스를 다루지 않는 경우,\n스위치문에서 모든 열거형의 케이스를 다루지 않았다고\n경고를 통해 알려줌 ===> 개발자의 실수 가능성을 컴파일 시점에 알려줌</li>\n<li>“Switch must be exhaustive”로 알려줌</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">switch</span> userLogin <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"이메일 로그인\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>facebook<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"페이스북 로그인\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"구글 로그인\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token attribute atrule\">@unknown</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"그 외의 모든 경우\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95enumerations\">열거형(Enumerations)</a></p>\n<ul>\n<li><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%98-%EC%9B%90%EC%8B%9C%EA%B0%92%EA%B3%BC-%EC%97%B0%EA%B4%80%EA%B0%92\">열거형의 원시값과 연관값</a></li>\n<li><a href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92%EC%9D%98-%ED%99%9C%EC%9A%A9\">원시값의 활용</a></li>\n<li><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%98-%EC%97%B0%EA%B4%80%EA%B0%92-associated-values\">열거형의 연관값 (Associated Values)</a></li>\n<li><a href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92raw-values%EA%B3%BC-%EC%97%B0%EA%B4%80%EA%B0%92associated-values%EC%9D%98-%EC%B0%A8%EC%9D%B4\">원시값(Raw Values)과 연관값(Associated Values)의 차이</a></li>\n<li><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-switch%EB%AC%B8\">열거형과 switch문</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%83%80%EC%9E%85%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%ED%99%95%ED%95%9C-%EC%9D%B4%ED%95%B4\">옵셔널 타입에 대한 정확한 이해</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%97%90-%EC%97%B0%EA%B4%80%EA%B0%92%EC%9D%B4-%EC%97%86%EA%B3%A0-%EC%98%B5%EC%85%94%EB%84%90-%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%BC-%EA%B2%BD%EC%9A%B0\">열거형에 (연관값이 없고), 옵셔널 열거형일 경우</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%9C%84%EC%B9%98%EB%AC%B8%EC%9D%98-%ED%8E%B8%EC%9D%98%EC%84%B1\">스위치문의 편의성</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%97%90-%EC%97%B0%EA%B4%80%EA%B0%92%EC%9D%B4-%EC%9E%88%EB%8A%94-%EA%B2%BD%EC%9A%B0\">열거형에 연관값이 있는 경우</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%B0%EA%B4%80%EA%B0%92associated-values%EC%9D%B4-%EC%9E%88%EB%8A%94-%EA%B2%BD%EC%9A%B0-if--guard--for-in--while-%EB%AC%B8-%EC%97%B4%EA%B1%B0%ED%98%95-case-%ED%8C%A8%ED%84%B4\">연관값(Associated Values)이 있는 경우 if / guard / for-in / while 문 (열거형 case 패턴)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%8C%A8%ED%84%B4optional-pattern\">옵셔널 패턴(Optional Pattern)</a></p>\n<ul>\n<li><a href=\"#if%EB%AC%B8%EC%97%90%EC%84%9C%EB%8F%84\">If문에서도?</a></li>\n<li><a href=\"#for%EB%AC%B8%EC%97%90%EC%84%9C%EB%8F%84\">For문에서도?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#unknown-%ED%82%A4%EC%9B%8C%EB%93%9C\">@Unknown 키워드</a></p>\n</li>\n</ul>\n</div>","excerpt":"열거형(Enumerations) 타입 자체를 한정된 사례(case)안에서 정의할 수 있는 타입 한정된 사례(정해진 갯수) 안에서 정의할 수 있을때 월 / 화 / 수 / 목 / 금 / 토 / 일 동 / 서 / 남 / 북 좌로 정렬 / 가운데 정렬 / 우측 정렬 초등학교 / 중학교 / 고등학교 / 대학교 남 / 여 가위 / 바위 / 보 열거형을 사용하면 코드의 가독성과 안정성이 높아짐 ===> 명확한 분기 처리 가능 열거형의 원시값과 연관값 열거형의 원시값은 매칭되는 기본값(정수/문자열)을 정해, 열거형을 좀 더 쉽게 활용 가능 → Int나 String 형태가 보통 많이 쓰이긴 한다. 원시값 입력안하면 0, 1, 2  이렇게 자동으로 저장됨 (정수의 경우 숫자가 하나씩 증가) 1(설정시), 2, 3 0, 2(설정시), 3 원시값의 활용 숫자 또는 문자열과 매칭시켜 자유롭게 활용 가능 (숫자 ←→ 열거형 타입) 논리적으로 nil이 될 수 없다면, 출력은 하지만 문자열은 아님에 주의 여기…","frontmatter":{"date":"July 14, 2024","title":"Swift 특이점①, 열거형(Enum)","categories":"iOS TIL","author":"ALEX","emoji":"🍎"},"fields":{"slug":"/ios-enum/"}},"next":{"id":"552137d8-d624-5da4-bd54-072a652417ee","html":"<h2 id=\"스위프트-컬렉션\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EC%BB%AC%EB%A0%89%EC%85%98\" aria-label=\"스위프트 컬렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스위프트 컬렉션</h2>\n<p>데이터를 효율적으로 관리하기 위한 자료형 타입이다.</p>\n<ul>\n<li>Array : 데이터를 순서대로 저장하는 컬렉션</li>\n<li>Dictionary : key: value 하나의 쌍으로 관리 (X순서)</li>\n<li>Set : X순서, X중복</li>\n</ul>\n<h2 id=\"array-배열\" style=\"position:relative;\"><a href=\"#array-%EB%B0%B0%EC%97%B4\" aria-label=\"array 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array 배열</h2>\n<p>파이썬에서의 <code class=\"language-text\">리스트</code> 와 많이 유사한 형태이다</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 정식문법</span>\n<span class=\"token keyword\">let</span> strArray1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\">// 단축문법</span>\n<span class=\"token keyword\">let</span> strArray2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>배열의 문법 약속</li>\n<li>[] 대괄호로 묶는다. 배열의 인덱스의 시작은 0부터 (모든 프로그래밍 언어 공통 사항)</li>\n<li>1개의 배열에는 동일한 타입의 데이터만 담을 수 있다.</li>\n<li>(순서가 있기 때문에) 값은 중복 가능</li>\n</ul>\n<h3 id=\"배열의-기본기능\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B8%B0%EB%8A%A5\" aria-label=\"배열의 기본기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열의 기본기능</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">numsArray<span class=\"token punctuation\">.</span>count   <span class=\"token comment\">//영어단어 그대로...</span>\nnumsArray<span class=\"token punctuation\">.</span>isEmpty\n\n\nnumsArray<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//파라미터로 값을 전달</span>\nnumsArray<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\n\nnumsArray<span class=\"token punctuation\">.</span><span class=\"token function\">randomElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nnumsArray<span class=\"token punctuation\">.</span><span class=\"token function\">swapAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3 id=\"배열의-각-요소element에-대한-접근\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B0%81-%EC%9A%94%EC%86%8Celement%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%91%EA%B7%BC\" aria-label=\"배열의 각 요소element에 대한 접근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열의 각 요소(element)에 대한 접근</h3>\n<p>서브스크립트를 이용해서 각 요소에 효율적으로 접근할 수 있다. 이 점 또한 파이썬과 매우 유사한 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">stringArray<span class=\"token punctuation\">.</span>first   <span class=\"token comment\">// 리턴값 String?  ====> 빈 배열이라면 nil 리턴</span>\nstringArray<span class=\"token punctuation\">.</span>last\n\n\n<span class=\"token comment\">// 배열의 시작 인덱스</span>\nstringArray<span class=\"token punctuation\">.</span>startIndex\n\nstringArray<span class=\"token punctuation\">.</span>endIndex\n<span class=\"token comment\">//stringArray.endIndex.advanced(by: -1)</span>\n\n\nstringArray<span class=\"token punctuation\">[</span>stringArray<span class=\"token punctuation\">.</span>startIndex<span class=\"token punctuation\">]</span>\n\nstringArray<span class=\"token punctuation\">[</span>stringArray<span class=\"token punctuation\">.</span>endIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\nstringArray<span class=\"token punctuation\">.</span><span class=\"token function\">firstIndex</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"iOS\"</span></span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 앞에서 부터 찾았을때 \"iOS\"는 배열의 (앞에서부터) 몇번째</span>\n\nstringArray<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndex</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"iOS\"</span></span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 뒤에서 부터 찾았을때 \"iOS\"는 배열의 (앞에서부터) 몇번째</span>\n\n\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> stringArray<span class=\"token punctuation\">.</span><span class=\"token function\">firstIndex</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"iOS\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>스위프트를 배우면서 제일 많이 느끼는건, 에러처리에 굉장히 쫄아있는(?) 느낌이다.</p>\n<p>파이썬에 비하면 정말 과할 정도로 많은 함수를 지원하는데, 공통적으로 모든함수에서, ‘너가 찾으려는 게 없을 수도 있어~‘를 대비하여 옵셔널 처리를 하여 결과값을 보여준다. 물론, 해당값을 생으로 쓰려면 옵셔널 바인딩과 같은 옵셔널을 벗기는 과정을 한번 더 거쳐야하지만, 에러가 나는 것 대신 nil이 나오는 건 나쁘지 않은 것 같다.</p>\n<h3 id=\"배열의-삽입-교체-추가-삭제-및-기타기능\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%82%BD%EC%9E%85-%EA%B5%90%EC%B2%B4-%EC%B6%94%EA%B0%80-%EC%82%AD%EC%A0%9C-%EB%B0%8F-%EA%B8%B0%ED%83%80%EA%B8%B0%EB%8A%A5\" aria-label=\"배열의 삽입 교체 추가 삭제 및 기타기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열의 삽입, 교체, 추가 삭제 및 기타기능</h3>\n<p>이것도 타 언어들과 매우 비슷한 기능인 것 같아서 간단하게만.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> alphabet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"D\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"E\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"F\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"G\"</span></span><span class=\"token punctuation\">]</span>\n\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"c\"</span></span><span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span><span class=\"token punctuation\">,</span><span class=\"token string-literal\"><span class=\"token string\">\"b\"</span></span><span class=\"token punctuation\">,</span><span class=\"token string-literal\"><span class=\"token string\">\"c\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span><span class=\"token punctuation\">,</span><span class=\"token string-literal\"><span class=\"token string\">\"b\"</span></span><span class=\"token punctuation\">,</span><span class=\"token string-literal\"><span class=\"token string\">\"c\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> alphabet<span class=\"token punctuation\">.</span>endIndex<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// 요소 교체하기</span>\nalphabet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span>\nalphabet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"x\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"y\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"z\"</span></span><span class=\"token punctuation\">]</span>\nalphabet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">//교체하기 함수 문법</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">replaceSubrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"b\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"c\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//추가하기 </span>\nalphabet <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"H\"</span></span><span class=\"token punctuation\">]</span>\n\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"H\"</span></span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 맨 마지막에 추가하는 것</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"H\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"I\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 에러 ===> 동일한 자료형만 저장가능함</span>\n\n<span class=\"token comment\">//삭제(제거하기)</span>\nalphabet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">//빈배열 전달하면 해당 범위가 삭제</span>\n\n\n<span class=\"token comment\">// 요소 한개 삭제</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 삭제하고, 삭제된 요소 리턴</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 잘못된 인덱스 전달 ====> 에러발생</span>\n\n\n<span class=\"token comment\">// 요소 범위 삭제</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeSubrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 맨 앞에 요소 삭제하고 삭제된 요소 리턴 (리턴형 String)</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 앞의 두개의 요소 삭제 ===> 리턴은 안함</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 맨 뒤에 요소 삭제하고 삭제된 요소 리턴 (리턴형 String)</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//배열이 비어있는지도 잘 확인해보고 삭제(제거)해야함 =======> 에러</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 리턴형 String</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 리턴형 String</span>\n\n<span class=\"token comment\">// 배열의 요소 모두 삭제(제거)</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nalphabet<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>keepingCapacity<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 저장공간을 일단은 보관해 둠. (안의 데이터만 일단 날림)</span></code></pre></div>\n<p>메모리와 관련된 배열함수도 있는게 신기하다.</p>\n<ol>\n<li>배열을 직접정렬하는 메서드  sort  (동사)</li>\n<li>정렬된 새로운 배열을 리턴  sorted (동사ing/동사ed)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 배열을 직접 정렬 (오름차순) (배열리턴 하지 않음)</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//오름차순으로 정렬</span>\n\n\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 요소를 역순으로 정렬  (배열리턴 하지 않음)</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 새로운 배열은 생성하지 않고, 배열의 메모리는 공유하면서 역순으로 열거할 수 있는 형식을 리턴</span>\n\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">suffle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">suffled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>배열끼리의 비교도 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"b\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"c\"</span></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 두 배열을 비교해보기</span>\n\na <span class=\"token operator\">==</span> b   <span class=\"token comment\">// false</span>\na <span class=\"token operator\">!=</span> b   <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 개별요소 비교, 저장순서도 비교 하기 때문에</span></code></pre></div>\n<p>배열에서는 <code class=\"language-text\">순서</code> 가 가장 중요한 특징이기 때문에, 이 부분도 비교할 요소로 들어간다는 점 알아두어야 할 꺼 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> nums <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//Python이랑 형태가 매우 동일..</span>\n\n<span class=\"token comment\">//  enumerate </span>\n<span class=\"token comment\">// (offset: 0, element: 10)</span>\n\n\n<span class=\"token keyword\">for</span> tuple <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">enumerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//print(tuple)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">tuple<span class=\"token punctuation\">.</span><span class=\"token number\">0</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">tuple<span class=\"token punctuation\">.</span><span class=\"token number\">1</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">for</span> tuple <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">enumerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\">// 바로 뽑아내기</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">tuple<span class=\"token punctuation\">.</span>offset</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">tuple<span class=\"token punctuation\">.</span>element</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">enumerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\">// 거꾸로 뒤에서 부터</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">index</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">value</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>파이썬도 enumerated 함수가 있는데, 특이한 건 튜플에 key/value가 offset, element라는 이름으로 붙여져서 리턴되고, 이를 직접 해당명명법으로 호출까지 되는 점이 신기한거 같다.\n(생각보다 세련된 언어라는 게 느껴지는 부분)</p>\n<br/>\n<h2 id=\"dictionary-딕셔너리\" style=\"position:relative;\"><a href=\"#dictionary-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\" aria-label=\"dictionary 딕셔너리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary 딕셔너리</h2>\n<ul>\n<li>딕셔너리의 문법 약속</li>\n<li>[] 대괄호로 묶는다. (쌍을 콜론으로 처리)</li>\n<li>키값은 유일해야함 / 중복 불가능(구분하는 요소이기 때문에) 밸류값은 중복 가능</li>\n<li>1개의 딕셔너리에는 동일한 자료형 쌍의 데이터만 담을 수 있음</li>\n<li>키값은 Hashble 해야함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 단축문법</span>\n<span class=\"token keyword\">var</span> words<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 정식문법</span>\n<span class=\"token keyword\">let</span> words1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span>\n\n\n<span class=\"token keyword\">var</span> dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">// 딕셔너리 리터럴로 생성해서 저장</span>\n<span class=\"token keyword\">let</span> dic1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 내부적으로 순서가 존재하지 않음</span></code></pre></div>\n<h4 id=\"hashable\" style=\"position:relative;\"><a href=\"#hashable\" aria-label=\"hashable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hashable?</h4>\n<p>해시테이블 알고리즘은, 앞에서부터 탐색하는 완전탐색, 양쪽방향에서 찾는 이진탐색보다 훨씬 빠른 알고리즘이다.</p>\n<blockquote>\n<p>도서관의 책들이 잘 정리되어 있으면 우리는 우리가 원하는 책을 쉽게 열람할 수 있다.(= 해시테이블) 하지만 오래된 책방 뒤죽박죽 되어 있는 책들 중에 우리가 원하는 책을 찾으려면 꽤 시간이 걸릴 것이다. (완전탐색/이진탐색)</p>\n</blockquote>\n<p>근데 이게 천하무적일까? 모든 알고리즘에는 장점이 있다면 단점이 있는 법. <code class=\"language-text\">Hash Collision</code> 해시충돌이 이 알고리즘의 단점이라고 볼 수 있다.</p>\n<ul>\n<li>\n<p>Hash라는 알고리즘은 고유의 key값을 생성해서 단 하나의 자료를 찾는데 쓰인다고 하지만, <code class=\"language-text\">고유</code>의 원칙은 참 어렵다고 한다. 즉, 무한히 생성될 수 있는 Key값에 유한한 Hash값을 매칭한다면, 분명 겹치는 hash가 생길 수 밖에 없다는게 이 알고리즘의 단점이다.</p>\n</li>\n<li>\n<p>Hash의 저장 단계의 시간복잡도는 0(1)이다. key는 고유하며 해시함수의 결과로 나온 해시에 매칭되는 value를 찾으면 되기 때문이다. 하지만, 최악의 경우 0(n)이 될 수 있다. 해시 충돌로 인해 모든 bucket의 value들을 찾아봐야 하는 경우를 고려해야하기 때문.</p>\n</li>\n</ul>\n<h3 id=\"빈-딕셔너리-생성\" style=\"position:relative;\"><a href=\"#%EB%B9%88-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%83%9D%EC%84%B1\" aria-label=\"빈 딕셔너리 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빈 딕셔너리 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> emptyDic1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> emptyDic2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> emptyDic3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> dictFromLiteral <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 타입 정보가 없으면 유추할 수가 없다.</span></code></pre></div>\n<p>여기서는 타입추론이 안되나봄…</p>\n<h3 id=\"딕셔너리의-여러가지-기능\" style=\"position:relative;\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-%EC%97%AC%EB%9F%AC%EA%B0%80%EC%A7%80-%EA%B8%B0%EB%8A%A5\" aria-label=\"딕셔너리의 여러가지 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리의 여러가지 기능</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">]</span>\n\ndic<span class=\"token punctuation\">.</span>count\ndic<span class=\"token punctuation\">.</span>isEmpty\n\ndic<span class=\"token punctuation\">.</span><span class=\"token function\">randomElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// Named Tuple 형태로 리턴</span>\n<span class=\"token comment\">// optional(key: \"C\", value: \"City\")</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">//딕셔너리는 기본적으로 서브스크립트[ ]를 이용한 문법을 주로 사용</span>\n<span class=\"token comment\">// 딕셔너리</span>\ndic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">]</span>\n\n\n\ndic<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string-literal\"><span class=\"token string\">\"김동찬\"</span></span>      <span class=\"token comment\">// nil의 가능성 =====> String?(옵셔널)</span>\n<span class=\"token comment\">//Value of optional type 'String?' must be unwrapped to a value of type 'String'</span>\n\n\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 옵셔널 바인딩</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Not found\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ndic<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"S\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Empty\"</span></span><span class=\"token punctuation\">]</span>       <span class=\"token comment\">// nil이 발생할 확률이 없음</span>\n<span class=\"token comment\">// 자료가 없으면 기본값을 리턴하는 문법  ===> 리턴 String</span>\n\n\ndic<span class=\"token punctuation\">.</span>keys\ndic<span class=\"token punctuation\">.</span>values\n\ndic<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndic<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// 오름차순 정렬  ===> \"return 배열\" 배열이 됨</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"딕셔너리-업데이트update---삽입하기교체하기추가하기\" style=\"position:relative;\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8update---%EC%82%BD%EC%9E%85%ED%95%98%EA%B8%B0%EA%B5%90%EC%B2%B4%ED%95%98%EA%B8%B0%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"딕셔너리 업데이트update   삽입하기교체하기추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리 업데이트(update) - 삽입하기/교체하기/추가하기</h3>\n<p>딕셔너리는 append 함수를 제공하지 않는다.</p>\n<ul>\n<li>append는 순서가 있는 컬렉션의 끝에 추가하는 개념</li>\n<li>딕셔너리는 순서가 없기 때문에, update를 통해서 추가</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\nwords<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span>   <span class=\"token comment\">// 애플로 다시 바꾸기</span>\n\nwords<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span>  <span class=\"token comment\">// 동일한 키가 없으면 ===> 추가하기</span>\nwords<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Blue\"</span></span>    <span class=\"token comment\">// 동일한 키가 있으면 ===> 기존 밸류 덮어쓰기</span>\n\nwords<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ==> nil</span>\n\n\n<span class=\"token comment\">// (정식 기능) 함수 문법 (update + insert = upsert)</span>\n\nwords<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 새로운 요소가 추가되면 ==> 리턴 nil</span>\n\nwords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>      <span class=\"token comment\">// 빈 딕셔너리로 만들기</span>\nwords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">// 전체 교체하기(바꾸기)</span></code></pre></div>\n<h3 id=\"딕셔너리-삭제하기\" style=\"position:relative;\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"딕셔너리 삭제하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리 삭제하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\">// 요소 삭제해 보기</span>\ndic<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span>    <span class=\"token comment\">// 해당요소 삭제</span>\ndic<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"E\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span>   <span class=\"token comment\">// 존재하지 않는 키/값을 삭제 ======> 아무일이 일어나지 않음(에러아님)</span>\ndic\n\n\n<span class=\"token comment\">// 함수로 삭제해보기</span>\ndic<span class=\"token punctuation\">.</span><span class=\"token function\">removeValue</span><span class=\"token punctuation\">(</span>forKey<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 삭제후, 삭제된 값 리턴</span>\ndic<span class=\"token punctuation\">.</span><span class=\"token function\">removeValue</span><span class=\"token punctuation\">(</span>forKey<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 다시 삭제해보기 ===> nil리턴</span>\n\n\n<span class=\"token comment\">// 전체 삭제하기</span>\ndic<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndic<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>keepingCapacity<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//여기도 있넨..</span></code></pre></div>\n<h3 id=\"딕셔너리-기타등등\" style=\"position:relative;\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EA%B8%B0%ED%83%80%EB%93%B1%EB%93%B1\" aria-label=\"딕셔너리 기타등등 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리 기타등등</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\">// 비교 연산자</span>\na <span class=\"token operator\">==</span> b   <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 딕셔너리는 원래 순서가 없기 때문에, 순서는 상관없음</span>\n<span class=\"token comment\">// (순서 상관없이 무조건 true나옴 - Hashable하기 때문에, 순서 상관없이 비교가능)</span>\n\na <span class=\"token operator\">!=</span> b   <span class=\"token comment\">// false</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 딕셔너리의 중첩 사용</span>\n\n<span class=\"token keyword\">var</span> dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ndict1<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"arr1\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">]</span>\ndict1<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"arr2\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"D\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"E\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"F\"</span></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">//[\"arr1\": [\"A\", \"B\", \"C\"], \"arr2\": [\"D\", \"E\", \"F\"]]</span>\n\ndict1<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"arr\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span>  <span class=\"token comment\">// ======> Cannot assign value of type 'String' to subscript of type '[String]'</span>\n\n\n\n<span class=\"token keyword\">var</span> dict2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndict2<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"dic1\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"age\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\ndict2<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"dic2\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"age\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// [\"dic2\": [\"age\": 4, \"name\": 2], \"dic1\": [\"age\": 2, \"name\": 1]]</span></code></pre></div>\n<p>얘도 마찬가지로 타입이 정해졌으면 섞이지 말고, 하나로 통일해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> dict <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">key</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">value</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> dict <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Key :\"</span></span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> dict <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Value :\"</span></span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>딕셔너리는 열거하지 않아도, Named 튜플 형태로 하나식 꺼내서 전달, 순서가 없으므로, 실행마다 순서가 달라짐!!!</p>\n<ul>\n<li>데이터 바구니이기 때문에, 차례대로 하나씩 꺼내서 사용하는 경우가 많을 수 있어서 활용 가능</li>\n</ul>\n<h2 id=\"set-세트\" style=\"position:relative;\"><a href=\"#set-%EC%84%B8%ED%8A%B8\" aria-label=\"set 세트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set 세트</h2>\n<p>수학에서의 집합과 비슷한 연산을 제공하는 컬렉션</p>\n<ul>\n<li>Set의 문법 약속</li>\n<li>생김새는 배열과 같음(따라서, 생성시 타입을 선언 해야함)</li>\n<li>수학에서의 집합과 동일하기 때문에 요소는 유일해야함(순서가 존재하지 않음)</li>\n</ul>\n<p><strong>Set의 값과 Dictionary의 키값은 Hashable</strong></p>\n<ol>\n<li>정렬순서보다 검색속도가 중요한 경우에 사용</li>\n<li>검색에 내부적으로 Hashing 알고리즘 사용<br/>(hashing ===> 특정값을 고정된 길이의 값으로 변환하는 기법으로 인덱싱과 암호화에서 자주 사용됨)</li>\n<li>집합의 수학적인 개념(합집합/교집합/차집합/대칭차집합)을 이용할 필요가 있을 때 <br/>(집합을 계산하기 간편한 함수를 내장)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 단축문법</span>\n<span class=\"token keyword\">let</span> set1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 정식문법</span>\n<span class=\"token keyword\">let</span> set2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 빈 세트 생성</span>\n<span class=\"token keyword\">let</span> emptySet<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> emptySet1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"there-is-no-append-func\" style=\"position:relative;\"><a href=\"#there-is-no-append-func\" aria-label=\"there is no append func permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>There is no append func.</h3>\n<p>Set는 append 함수를 제공하지 않음 => append는 순서가 있는 컬렉션의 끝에 추가하는 개념</p>\n<ul>\n<li>Set은 순서가 없기 때문에, update를 통해서 추가</li>\n<li>당연하게도 서브스크립트 관련 문법 없음!!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// Int?</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 새로운 요소가 추가되면 ====> 리턴 nil</span>\n\n\n\n\n<span class=\"token keyword\">var</span> stringSet<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Banana\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"City\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Swift\"</span></span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\">// 요소 삭제해 보기</span>\nstringSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Swift\"</span></span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \"Swift\" 삭제한 요소를 리턴</span>\nstringSet                     <span class=\"token comment\">// [\"Hello\", \"Apple\"]</span>\n\n<span class=\"token comment\">// 존재하지 않는 요소를 삭제해보기</span>\nstringSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Steve\"</span></span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// nil    (에러는 발생하지 않음)</span>\n\n<span class=\"token comment\">// 전체요소 삭제</span>\nstringSet<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstringSet<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>keepingCapacity<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기 또 있네 메모리;;</p>\n<h3 id=\"어찌보면-set를-사용하는-근본적인-이유\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EC%B0%8C%EB%B3%B4%EB%A9%B4-set%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B7%BC%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%9D%B4%EC%9C%A0\" aria-label=\"어찌보면 set를 사용하는 근본적인 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어찌보면 set를 사용하는 근본적인 이유</h3>\n<p><strong>부분집합 / 상위집합 / 서로소</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>     <span class=\"token comment\">// 홀수 모음</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 짝수 모음</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>     <span class=\"token comment\">// 홀수 모음</span>\n\n<span class=\"token comment\">// 부분집합 여부를 판단</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">isSubset</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// true 부분집합 여부</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">isStrictSubset</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// false 진부분집합 여부</span>\n\n\n<span class=\"token comment\">// 상위집합</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">isSuperset</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// true 상위집합 여부</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">isStrictSuperset</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// false  진상위집합 여부</span>\n\n<span class=\"token comment\">// 서로소 여부</span>\nd<span class=\"token punctuation\">.</span><span class=\"token function\">isDisjoint</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<br/>\n<ul>\n<li>합집합</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> unionSet <span class=\"token operator\">=</span>  b<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">formUnion</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 원본변경</span></code></pre></div>\n<br/>\n<ul>\n<li>교집합</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> interSet <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">formIntersection</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 원본변경</span></code></pre></div>\n<br/>\n<ul>\n<li>차집합</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> subSet <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">subtracting</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 원본변경</span>\n</code></pre></div>\n<br/>\n<ul>\n<li>대칭차집합</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> symmetricSet <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">formSymmetricDifference</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 원본변경</span></code></pre></div>\n<br/>\n<h3 id=\"특이한-세트의-특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%9D%B4%ED%95%9C-%EC%84%B8%ED%8A%B8%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"특이한 세트의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특이한 세트의 특징(?)</h3>\n<p>Set을 정렬하면, 배열로 리턴함 (정렬은 순서가 필요하기 때문)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> newSet<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> newArray<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> newSet<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//array 타입으로 반환됨</span></code></pre></div>\n<br/>\n<h2 id=\"keyvalupairs\" style=\"position:relative;\"><a href=\"#keyvalupairs\" aria-label=\"keyvalupairs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KeyValuPairs</h2>\n<p>넌 뭐냐<br/>.<br/>.<br/>.</p>\n<p>딕셔너리와 유사한 형태이지만, 배열처럼 순서가 있는 컬렉션..?</p>\n<ul>\n<li>스위프트 5.2 버전에 등장</li>\n<li>딕셔너리와 비슷한 형태지만, “순서”가 있는 컬렉션</li>\n<li>key값이 해셔블(hashable)일 필요없음 (검색 알고리즘상 빠르지 않음)</li>\n<li>key값이 동일한 것도 가능</li>\n</ul>\n<p><em>약간 필요할때만 써라~ 이런 느낌이다. 임시적인 타입 같아보임.</em></p>\n<ul>\n<li>배열처럼, 인덱스로 접근 가능</li>\n<li>요소에서는 튜플방식으로 접근</li>\n<li>append / remove 같은 기능이 없음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> introduce<span class=\"token punctuation\">:</span> <span class=\"token class-name\">KeyValuePairs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"first\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"second\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"My Name\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"third\"</span></span><span class=\"token punctuation\">:</span><span class=\"token string-literal\"><span class=\"token string\">\"is\"</span></span><span class=\"token punctuation\">]</span>\n\nintroduce<span class=\"token punctuation\">.</span>count\nintroduce<span class=\"token punctuation\">.</span>isEmpty\n\nintroduce<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">introduce<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">는 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">introduce<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> 입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">introduce<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">는 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">introduce<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> 입니다.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">introduce<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">는 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">introduce<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> 입니다.\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>딕셔너리이지만, 저장된 순서가 중요할 경우, 또는 데이터가 반복될 경우만 임시적/제한적으로 사용</p>\n<h2 id=\"copy-on-write-최적화\" style=\"position:relative;\"><a href=\"#copy-on-write-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"copy on write 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Copy-On-Write 최적화</h2>\n<p>코드상에서 값을 복사해서 담는다 하더라도, 실제 값이 바뀌기 전까지는 그냥 하나의 메모리 값을 공유해서 사용한다는 이론.\n(메모리를 적게 차지하기 위해서 스위프트 언어가 알아서 내부에서 처리하는 매커니즘)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> subArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 여기서 메모리는 따로 저장되지 않고, Array의 일부 메모리를 참조하는 방식으로 메모리를 사용한다 (추가적인 메모리X)</span></code></pre></div>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EC%BB%AC%EB%A0%89%EC%85%98\">스위프트 컬렉션</a></p>\n</li>\n<li>\n<p><a href=\"#array-%EB%B0%B0%EC%97%B4\">Array 배열</a></p>\n<ul>\n<li><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B8%B0%EB%8A%A5\">배열의 기본기능</a></li>\n<li><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B0%81-%EC%9A%94%EC%86%8Celement%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%91%EA%B7%BC\">배열의 각 요소(element)에 대한 접근</a></li>\n<li><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%82%BD%EC%9E%85-%EA%B5%90%EC%B2%B4-%EC%B6%94%EA%B0%80-%EC%82%AD%EC%A0%9C-%EB%B0%8F-%EA%B8%B0%ED%83%80%EA%B8%B0%EB%8A%A5\">배열의 삽입, 교체, 추가 삭제 및 기타기능</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dictionary-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\">Dictionary 딕셔너리</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#hashable\">Hashable?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B9%88-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%83%9D%EC%84%B1\">빈 딕셔너리 생성</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-%EC%97%AC%EB%9F%AC%EA%B0%80%EC%A7%80-%EA%B8%B0%EB%8A%A5\">딕셔너리의 여러가지 기능</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8update---%EC%82%BD%EC%9E%85%ED%95%98%EA%B8%B0%EA%B5%90%EC%B2%B4%ED%95%98%EA%B8%B0%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">딕셔너리 업데이트(update) - 삽입하기/교체하기/추가하기</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\">딕셔너리 삭제하기</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EA%B8%B0%ED%83%80%EB%93%B1%EB%93%B1\">딕셔너리 기타등등</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#set-%EC%84%B8%ED%8A%B8\">Set 세트</a></p>\n<ul>\n<li><a href=\"#there-is-no-append-func\">There is no append func.</a></li>\n<li><a href=\"#%EC%96%B4%EC%B0%8C%EB%B3%B4%EB%A9%B4-set%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B7%BC%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%9D%B4%EC%9C%A0\">어찌보면 set를 사용하는 근본적인 이유</a></li>\n<li><a href=\"#%ED%8A%B9%EC%9D%B4%ED%95%9C-%EC%84%B8%ED%8A%B8%EC%9D%98-%ED%8A%B9%EC%A7%95\">특이한 세트의 특징(?)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#keyvalupairs\">KeyValuPairs</a></p>\n</li>\n<li>\n<p><a href=\"#copy-on-write-%EC%B5%9C%EC%A0%81%ED%99%94\">Copy-On-Write 최적화</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 11, 2024","title":"iOS스터디 week2, 컬렉션(collection)","categories":"iOS TIL","author":"ALEX","emoji":"🍎"},"fields":{"slug":"/ios-collection/"}},"prev":{"id":"38fa7a7b-a348-53ee-a244-d1e136f87988","html":"<h2 id=\"구조체struct-and-클래스class\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4struct-and-%ED%81%B4%EB%9E%98%EC%8A%A4class\" aria-label=\"구조체struct and 클래스class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체(struct) and 클래스(class)</h2>\n<p>이 둘은 모두 객체지향 → 공통적으로 속성값(properties)은 같다.</p>\n<blockquote>\n<p>저장속성, 지연(Lazy)저장속성, 계산속성(Computed), 타입속성, 속성 감시자(observer)</p>\n</blockquote>\n<p>공통적인 속성값 중, 계산속성과 타입속성에 대해 알아보자.</p>\n<br/>\n<h3 id=\"계산속성computd-properties\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1computd-properties\" aria-label=\"계산속성computd properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산속성(Computd Properties)</h3>\n<p>값이 일반적으로 저장되는 일반적인 속성(변수)를 저장 속성이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">#여태 배웠던 방식\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">calculateBMI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n        <span class=\"token keyword\">return</span> bmi\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지금까지는 변수선언 부 밑에 매서드를 작성하여 간단하게 리턴하는 방식을 사용하였다. 이 방식은 단순이 계산 속성이라기 보다는, 저장속성으로 저장 value들을 이용하여 계산 문법을 실행한 결과값을 리턴했다고 보는게 맞겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">#계산속성 적용하기\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">var</span> bmi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>                                               \n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>밖에서 해당 인스턴스에 접근해서 “get”, 값을 얻는다는 의미이다. 어떻게 보면 저장속성이라고 볼 수 있지만, 리눅스의 Read속성과 비슷해보인다. 단순히 값을 읽어오는 것도 컴퓨터로서는 계산으로 판단하게 되는 것 같아보임.</p>\n<ul>\n<li>항상 다른 저장 속성에 의한 결과로 계산해 나오는 그런 방식의 메서드인 경우</li>\n<li>아예 속성처럼 만들 수 있다. (= 계산 속성)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">var</span> bmi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">//getter</span>\n            <span class=\"token keyword\">let</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n            <span class=\"token keyword\">return</span> bmi\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>bmi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//setter</span>\n            weight <span class=\"token operator\">=</span> bmi <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> height <span class=\"token operator\">/</span> <span class=\"token number\">10000</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np2<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">165</span> \np2<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token number\">65</span>  \n\n\np2<span class=\"token punctuation\">.</span>bmi      <span class=\"token comment\">//23.875</span>\np2<span class=\"token punctuation\">.</span>bmi <span class=\"token operator\">=</span> <span class=\"token number\">25</span>    <span class=\"token comment\">//weight 속성 자동 변경(set속성)</span>\n\np2<span class=\"token punctuation\">.</span>weight       <span class=\"token comment\">//68.0625 변경되어 있음</span>\n</code></pre></div>\n<p>밖에서 해당 인스턴스에 접근해서 “set”, 값을 세팅(설정)한다는 의미</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">var</span> bmi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n        <span class=\"token keyword\">return</span> bmi\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>get블록만 있다면, 혹은 set을 쓸 필요가 없다면, 굳이 get{}으로 한번 더 감쌀 필요가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">var</span> bmi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n            <span class=\"token keyword\">return</span> bmi\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n            weight <span class=\"token operator\">=</span> newValue <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> height <span class=\"token operator\">/</span> <span class=\"token number\">10000</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>set블록의 파라미터를 생략하고 ‘newValue’로 대체가능하지만, 가독성에 좋은지는 잘 모르겠다. (기왕이면 메서드답게 코드 작성하는게… 예외를 두면 더 헷갈림;;;)</p>\n<br/>\n<h3 id=\"계산속성의-특징\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"계산속성의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산속성의 특징</h3>\n<p>메서드가 아닌, 속성방식으로 구현?</p>\n<ul>\n<li>외부에서 보기에 속성이름으로 설정가능하므로 보다 명확해 보임</li>\n<li>계산 속성은 실제 메모리 공간을 가지지 않고, 해당 속성에 접근했을때 다른 속성에 접근해서 계산한후, 그 계산 결과를 리턴하거나 세팅하는 메서드</li>\n</ul>\n<h3 id=\"계산속성의-주의점\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"계산속성의 주의점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산속성의 주의점</h3>\n<ul>\n<li>항상 변하는 값이므로, var로 선언해야함 (let로 선언불가)</li>\n<li>자료형 선언을 해야함(형식추론 형태 안됨) (메서드이기 때문에 파라미터, 리턴형이 필요한 개념)</li>\n<li>get은 반드시 선언 해야함(값을 얻는 것은 필수, 값을 set하는 것은 선택)</li>\n</ul>\n<br/>\n<h3 id=\"타입속성-type-properties\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%86%8D%EC%84%B1-type-properties\" aria-label=\"타입속성 type properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입속성 (Type Properties)</h3>\n<p>static이라는 키워드를 붙여서 사용하는 저장속성이다.</p>\n<ul>\n<li>일반 저장속성은 인스턴스를 생성할때, 생성자에서 모든 속성을 초기화를 완료.</li>\n<li>저장 타입(형식) 속성은 생성자가 따로 없기때문에, 항상 기본값이 필요. 생략할 수 없음.</li>\n<li>반드시 타입(형식)의 이름으로 접근해야한다.</li>\n</ul>\n<h3 id=\"저장-속성-계산-속성-모두-타입속성-가능\" style=\"position:relative;\"><a href=\"#%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1-%EA%B3%84%EC%82%B0-%EC%86%8D%EC%84%B1-%EB%AA%A8%EB%91%90-%ED%83%80%EC%9E%85%EC%86%8D%EC%84%B1-%EA%B0%80%EB%8A%A5\" aria-label=\"저장 속성 계산 속성 모두 타입속성 가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>저장 속성, 계산 속성 모두 타입속성 가능</h3>\n<ol>\n<li>타입-저장 속성</li>\n</ol>\n<p>let과 var모두 선언 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// 저장타입 속성 (값이 항상 있어야 함)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> pi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\">// 인스턴스를 몇개를 찍어내는지 확인</span>\n    \n    <span class=\"token comment\">// 저장 속성</span>\n    <span class=\"token keyword\">var</span> radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>     <span class=\"token comment\">// 반지름</span>\n    \n    <span class=\"token comment\">// 계산 속성</span>\n    <span class=\"token keyword\">var</span> diameter<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// 지름</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n            radius <span class=\"token operator\">=</span> newValue <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n        <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> circle1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>count                      <span class=\"token comment\">//1</span>\n\n<span class=\"token keyword\">var</span> circle2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>count                      <span class=\"token comment\">//2</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>pi\ncircle1<span class=\"token punctuation\">.</span>pi                      <span class=\"token comment\">//안됨</span></code></pre></div>\n<p>이와 비슷한게 애플에서 만들어둔 여러가지 타입들이 해당된다.</p>\n<ul>\n<li>Int.max/Int.min 이런 것들이 다 할당되어 있지만,</li>\n<li>4.min 이런 방식은 존재하지도, 말도 안되기 때문</li>\n</ul>\n<ol start=\"2\">\n<li>타입-계산 속성 (class키워드에서만)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 저장 타입 속성</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> pi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token comment\">// (계산) 타입 속성(read-only), Get생략</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> multiPi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> pi <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 저장 속성</span>\n    <span class=\"token keyword\">var</span> radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>     <span class=\"token comment\">// 반지름</span>\n    \n    \n    <span class=\"token comment\">// 생성자</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>메모리 공간이 할당되어 있지 않음! (메서드 그 자체)</li>\n<li>계속 바뀌는 값이기 때문에 Var만 선언 가능</li>\n</ul>\n<br/>\n<p><strong>Lazy(지연) 속성과 매우 유사한 특징을 갖는다</strong></p>\n<ul>\n<li>지연속성 : 인스턴스가 해당 저장값(value)를 호출할때 사용됨 (only var)</li>\n<li>타입속성 : 특정 인스턴스에 속한 속성이 아니기 때문에 불러올 순 없으나, 타입 자체에서 사용됨. (let, var모두 사용 가능)</li>\n<li>인스턴스 내에서도 접근하려면 타입이름 + 속성으로 써야 접근 가능함!!</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4struct-and-%ED%81%B4%EB%9E%98%EC%8A%A4class\">구조체(struct) and 클래스(class)</a></p>\n<ul>\n<li><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1computd-properties\">계산속성(Computd Properties)</a></li>\n<li><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1%EC%9D%98-%ED%8A%B9%EC%A7%95\">계산속성의 특징</a></li>\n<li><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\">계산속성의 주의점</a></li>\n<li><a href=\"#%ED%83%80%EC%9E%85%EC%86%8D%EC%84%B1-type-properties\">타입속성 (Type Properties)</a></li>\n<li><a href=\"#%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1-%EA%B3%84%EC%82%B0-%EC%86%8D%EC%84%B1-%EB%AA%A8%EB%91%90-%ED%83%80%EC%9E%85%EC%86%8D%EC%84%B1-%EA%B0%80%EB%8A%A5\">저장 속성, 계산 속성 모두 타입속성 가능</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 17, 2024","title":"iOS스터디 week3, 계산속성과 저장속성","categories":"iOS TIL","author":"ALEX","emoji":"🍎"},"fields":{"slug":"/ios-computed/"}},"site":{"siteMetadata":{"siteUrl":"https://dong-chan.com","comments":{"utterances":{"repo":"dongckim/dongckim.github.io"}}}}},"pageContext":{"slug":"/ios-enum/","nextSlug":"/ios-collection/","prevSlug":"/ios-computed/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}