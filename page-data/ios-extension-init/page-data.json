{"componentChunkName":"component---src-templates-blog-template-js","path":"/ios-extension-init/","result":{"data":{"cur":{"id":"b3fb622c-559e-5b20-97dd-83212705c66c","html":"<h2 id=\"구조체의-확장과-생성자-관련-세부사항\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-%ED%99%95%EC%9E%A5%EA%B3%BC-%EC%83%9D%EC%84%B1%EC%9E%90-%EA%B4%80%EB%A0%A8-%EC%84%B8%EB%B6%80%EC%82%AC%ED%95%AD\" aria-label=\"구조체의 확장과 생성자 관련 세부사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체의 확장과 생성자 관련 세부사항</h2>\n<p>확장에서도 생성자를 구현할 수 있지만, 모든 생성자를 구현할 수는 없다.</p>\n<p>잘생각해보자<br/>\nclass에서 편의생성자는 delegate across로 같은 스코프? 계층에 있는 생성자를 호출\n호출된 지정생성자는 메모리를 찍어내는 역할을 함.</p>\n<ul>\n<li>확장에서도, 말 의미 그대로 지정생성자를 추가하기보다는, 편의 생성자만 생성가능 (지정생성자 추가 불가/소멸자 추가 불가)</li>\n<li>다만 클래스가 아닌 경우에, 본체에 지정생성자를 호출하는 방법만 가능(convinence는 아니지만, 비슷한 방식)</li>\n<li><code class=\"language-text\">[예외]</code> 값타입(구조체)의 경우 저장속성에 기본값/생성자 정의안한 경우, 생성자 구현 가능</li>\n</ul>\n<br/>\n<h3 id=\"클래스에서의-확장예시\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%ED%99%95%EC%9E%A5%EC%98%88%EC%8B%9C\" aria-label=\"클래스에서의 확장예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스에서의 확장예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// UIColor 기본 생성자</span>\n<span class=\"token keyword\">var</span> color <span class=\"token operator\">=</span> <span class=\"token class-name\">UIColor</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">UIColor</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\">// 익스텐션 + 편의생성자 조합</span>\n    \n    <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// Float   / Double</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> color<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> color<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> color<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 아주 쉽게 객체 생성하는 방법을 제공 가능해짐</span>\n\n<span class=\"token class-name\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//UIColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)</span>\n</code></pre></div>\n<h3 id=\"구조체에서의-확장-예시\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%97%90%EC%84%9C%EC%9D%98-%ED%99%95%EC%9E%A5-%EC%98%88%EC%8B%9C\" aria-label=\"구조체에서의 확장 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체에서의 확장 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">//일단 확장 개념 뺴고!!</span>\n\n<span class=\"token comment\">//클래스였다면</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n\n    <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//구조체라서 클래스랑 비슷한 방식이지만 convenience 키워드 생략 가능하다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>구조체는 (원래) 편의 생성자가 존재하지 않고, 상속과 관련이 없기 때문에 지정생성자의 형태로도 자유롭게 생성자 구현 가능</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">에러가 나는 이유?</code> -> 본체에 멤버와이즈 이니셜라이저랑 기본생성자가 자동 구현이 됨. 따라서 확장에서 같은 기본 생성자를 한번 더 구현하게 되면 에러가 난다!</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span>num<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 본체의 생성자 호출 부분→</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 다른 생성자를 호출하면 에러가 나지 않음. → 약간 편의 생성자 느낌이긴 하다.</p>\n<br/>\n<h3 id=\"구조체에서-직접-생성자-구현\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%97%90%EC%84%9C-%EC%A7%81%EC%A0%91-%EC%83%9D%EC%84%B1%EC%9E%90-%EA%B5%AC%ED%98%84\" aria-label=\"구조체에서 직접 생성자 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체에서 직접 생성자 구현</h3>\n<p>직접 생성자 구현하면, 기본 생성자 init() → 멤버와이즈 생성자 제공 안되는 것이 원칙</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"예외-기본값--생성자-정의-안한-경우\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8-%EA%B8%B0%EB%B3%B8%EA%B0%92--%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A0%95%EC%9D%98-%EC%95%88%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-label=\"예외 기본값  생성자 정의 안한 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외! 기본값 + 생성자 정의 안한 경우</h3>\n<p>모든 저장속성에 기본값제공 + 본체에 직접 생성자를 구현하지 않았다면, 멤버와이즈 생성자 자동생성 + 확장에서 생성자 구현해도 괜찮음</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> num\n       <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> num\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"swift-공식문서의-예시\" style=\"position:relative;\"><a href=\"#swift-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"swift 공식문서의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift 공식문서의 예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n   \n   <span class=\"token comment\">//init(x: Double, y: Double)</span>\n   <span class=\"token comment\">//init()</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Size</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> width <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// Rect구조체</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Rect</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">//기본 생성자 / 멤버와이즈 생성자가 자동 제공 중</span>\n   <span class=\"token keyword\">var</span> origin <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">let</span> defaultRect <span class=\"token operator\">=</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 기본생성자</span>\n\n<span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> memberwiseRect <span class=\"token operator\">=</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                         size<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    \n<span class=\"token comment\">// 멤버와이즈 생성자</span>\n\n\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Rect</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 센터값으로 Rect 생성하는 생성자 만들기 </span>\n   <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> originX <span class=\"token operator\">=</span> center<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">let</span> originY <span class=\"token operator\">=</span> center<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n       \n       <span class=\"token comment\">// (1) 본체의 멤버와이즈 생성자 호출 방식으로 구현 가능</span>\n       <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> originX<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> originY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">)</span>\n       \n       <span class=\"token comment\">// (2) 예외적인 경우, 직접 값을 설정하는 방식으로도 구현 가능</span>\n       <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> originX<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> originY<span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 새로 추가한 생성자로 인스턴스 생성해보기</span>\n\n<span class=\"token keyword\">let</span> centerRect <span class=\"token operator\">=</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                     size<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre></div>\n<p>예외적인 경우 → 저장속성에 기본값 + 본체에 생성자 구현 안한 경우 여전히 기본생성자/멤버와이즈 생성자 제공</p>\n<h2 id=\"생성자-회고\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%9A%8C%EA%B3%A0\" aria-label=\"생성자 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 회고</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">//가능 -> Nil</span></code></pre></div>\n<p>사실 모든 저장속성에 기본값이 있다면 init을 자동적으로 swift에서 만들어주고 있는 셈</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n   <span class=\"token keyword\">var</span> weght<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n   <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>       \n<span class=\"token comment\">//기본생성자 + 멤버와이즈 이니셜라이저 제공</span>\n</code></pre></div>\n <br/>\n<p>그렇다면 이런 경우엔?</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"초코\"</span></span>\n    <span class=\"token keyword\">var</span> weght<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n <span class=\"token punctuation\">}</span>\n\n\n <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>    \n <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>       </code></pre></div>\n<p>멤버와이즈 이니셜라이저는 기본으로 생성되어지고, 추가로 우리는 height값만 있다면 인스턴스를 찍어낼 수 있기 때문에 height만 파라미터로 받는 생성자도 추가적으로 제공되는 것이다.</p>\n <br/>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"초코\"</span></span>\n    <span class=\"token keyword\">var</span> weght<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">extension</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>\n <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n <span class=\"token comment\">//셋 모두 제공</span></code></pre></div>\n<p>원칙적으로는 init을 개발자가 추가했으니, 본체의 멤버와이즈는 작동되지 않아야하는 것이 원칙이나, 구조체에 한해서, 예외적으로 모두 다 제공이 된다.</p>\n<h2 id=\"멤버의-확장서브스크립트\" style=\"position:relative;\"><a href=\"#%EB%A9%A4%EB%B2%84%EC%9D%98-%ED%99%95%EC%9E%A5%EC%84%9C%EB%B8%8C%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" aria-label=\"멤버의 확장서브스크립트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멤버의 확장(서브스크립트)</h2>\n<ul>\n<li>메서드이기 뭐 당연한 소리겠다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">subscript</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">var</span> decimalBase <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        \n        <span class=\"token comment\">//자릿수 선정(10의 자리, 100의 자리..)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token omit keyword\">_</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span>num <span class=\"token punctuation\">{</span>  \n            decimalBase <span class=\"token operator\">*=</span> <span class=\"token number\">10</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token operator\">/</span> decimalBase<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h2 id=\"중첩타입\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9%ED%83%80%EC%9E%85\" aria-label=\"중첩타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩타입</h2>\n<p>클래스, 구조체 및 열거형에 새 중첩 유형을 추가 가능한 속성이다.\n다만, class 안에 class… 어디서 많이 본 듯하다. <code class=\"language-text\">오버라이딩</code> 가능한 타입속성에서 <code class=\"language-text\">static</code> 키워드 대신 <code class=\"language-text\">class</code> 키워드를 사용했었다. 헷갈리지 말자!</p>\n<blockquote>\n<p>오버라이드? 슈퍼클래스로부터 상속받은 메서드, 프로퍼티들을 재정의하는 키워드</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dongchan</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">class</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Bye\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DongchanAlex</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dongchan</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">class</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n그럼 이제 중첩이 어떤 식으로 이루어지는 지 알아보자\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Int(정수형 타입)에 종류(Kind) ====> 중첩 열거형 추가해 보기</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Kind</span> <span class=\"token punctuation\">{</span>       <span class=\"token comment\">// 음수인지, 0인지, 양수인지</span>\n        <span class=\"token keyword\">case</span> negative<span class=\"token punctuation\">,</span> zero<span class=\"token punctuation\">,</span> positive\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> kind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Kind</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 계산 속성으로 구현</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>                   <span class=\"token comment\">// 0인 경우</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>zero\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> x <span class=\"token keyword\">where</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\">// 0보다 큰경우</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>positive\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>                  <span class=\"token comment\">// 나머지 (0보다 작은 경우)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>negative\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n????그럼 rawValue 사용할 수 있나?\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">Int</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>positive<span class=\"token punctuation\">.</span>rawValue\n<span class=\"token class-name\">Int</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>zero\n<span class=\"token class-name\">Int</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>negative</code></pre></div>\n<p><code class=\"language-text\">에러발생</code> → 열거형 다시 복습해야겠다\n열거형 자체에 Int형으로 되어 있지 않기 때문에 아무리 rawvalue로 접근하고 싶어도 그럴 수 없다.\n만약 열거형을 Int형으로 바꿔서 정의해준다면 가능하다!</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Kind</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>       <span class=\"token comment\">// 열거형 Int형으로 교체</span>\n        <span class=\"token keyword\">case</span> negative<span class=\"token punctuation\">,</span> zero<span class=\"token punctuation\">,</span> positive\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> kind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Kind</span> <span class=\"token punctuation\">{</span>    \n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>                   \n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>zero\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> x <span class=\"token keyword\">where</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>   \n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>positive\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>                 \n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>negative\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Int</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>positive<span class=\"token punctuation\">.</span>rawValue      <span class=\"token comment\">//2</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%9D%98-%ED%99%95%EC%9E%A5%EA%B3%BC-%EC%83%9D%EC%84%B1%EC%9E%90-%EA%B4%80%EB%A0%A8-%EC%84%B8%EB%B6%80%EC%82%AC%ED%95%AD\">구조체의 확장과 생성자 관련 세부사항</a></p>\n<ul>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%ED%99%95%EC%9E%A5%EC%98%88%EC%8B%9C\">클래스에서의 확장예시</a></li>\n<li><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%97%90%EC%84%9C%EC%9D%98-%ED%99%95%EC%9E%A5-%EC%98%88%EC%8B%9C\">구조체에서의 확장 예시</a></li>\n<li><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%97%90%EC%84%9C-%EC%A7%81%EC%A0%91-%EC%83%9D%EC%84%B1%EC%9E%90-%EA%B5%AC%ED%98%84\">구조체에서 직접 생성자 구현</a></li>\n<li><a href=\"#%EC%98%88%EC%99%B8-%EA%B8%B0%EB%B3%B8%EA%B0%92--%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A0%95%EC%9D%98-%EC%95%88%ED%95%9C-%EA%B2%BD%EC%9A%B0\">예외! 기본값 + 생성자 정의 안한 경우</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#swift-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C%EC%9D%98-%EC%98%88%EC%8B%9C\">Swift 공식문서의 예시</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%9A%8C%EA%B3%A0\">생성자 회고</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A9%A4%EB%B2%84%EC%9D%98-%ED%99%95%EC%9E%A5%EC%84%9C%EB%B8%8C%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\">멤버의 확장(서브스크립트)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A4%91%EC%B2%A9%ED%83%80%EC%9E%85\">중첩타입</a></p>\n</li>\n</ul>\n</div>","excerpt":"구조체의 확장과 생성자 관련 세부사항 확장에서도 생성자를 구현할 수 있지만, 모든 생성자를 구현할 수는 없다. 잘생각해보자\nclass에서 편의생성자는 delegate across로 같은 스코프? 계층에 있는 생성자를 호출\n호출된 지정생성자는 메모리를 찍어내는 역할을 함. 확장에서도, 말 의미 그대로 지정생성자를 추가하기보다는, 편의 생성자만 생성가능 (지정생성자 추가 불가/소멸자 추가 불가) 다만 클래스가 아닌 경우에, 본체에 지정생성자를 호출하는 방법만 가능(convinence는 아니지만, 비슷한 방식)  값타입(구조체)의 경우 저장속성에 기본값/생성자 정의안한 경우, 생성자 구현 가능 클래스에서의 확장예시 구조체에서의 확장 예시 구조체는 (원래) 편의 생성자가 존재하지 않고, 상속과 관련이 없기 때문에 지정생성자의 형태로도 자유롭게 생성자 구현 가능  -> 본체에 멤버와이즈 이니셜라이저랑 기본생성자가 자동 구현이 됨. 따라서 확장에서 같은 기본 생성자를 한번 더 구현하게 되면 …","frontmatter":{"date":"July 23, 2024","title":"iOS 스터디 week4. 구조체의 확장과 생성자 관련 세부사항","categories":"iOS TIL","author":"ALEX","emoji":"🍎"},"fields":{"slug":"/ios-extension-init/"}},"next":{"id":"38fa7a7b-a348-53ee-a244-d1e136f87988","html":"<h2 id=\"구조체struct-and-클래스class\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4struct-and-%ED%81%B4%EB%9E%98%EC%8A%A4class\" aria-label=\"구조체struct and 클래스class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체(struct) and 클래스(class)</h2>\n<p>이 둘은 모두 객체지향 → 공통적으로 속성값(properties)은 같다.</p>\n<blockquote>\n<p>저장속성, 지연(Lazy)저장속성, 계산속성(Computed), 타입속성, 속성 감시자(observer)</p>\n</blockquote>\n<p>공통적인 속성값 중, 계산속성과 타입속성에 대해 알아보자.</p>\n<br/>\n<h3 id=\"계산속성computd-properties\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1computd-properties\" aria-label=\"계산속성computd properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산속성(Computd Properties)</h3>\n<p>값이 일반적으로 저장되는 일반적인 속성(변수)를 저장 속성이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">#여태 배웠던 방식\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">calculateBMI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n        <span class=\"token keyword\">return</span> bmi\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지금까지는 변수선언 부 밑에 매서드를 작성하여 간단하게 리턴하는 방식을 사용하였다. 이 방식은 단순이 계산 속성이라기 보다는, 저장속성으로 저장 value들을 이용하여 계산 문법을 실행한 결과값을 리턴했다고 보는게 맞겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">#계산속성 적용하기\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">var</span> bmi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>                                               \n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>밖에서 해당 인스턴스에 접근해서 “get”, 값을 얻는다는 의미이다. 어떻게 보면 저장속성이라고 볼 수 있지만, 리눅스의 Read속성과 비슷해보인다. 단순히 값을 읽어오는 것도 컴퓨터로서는 계산으로 판단하게 되는 것 같아보임.</p>\n<ul>\n<li>항상 다른 저장 속성에 의한 결과로 계산해 나오는 그런 방식의 메서드인 경우</li>\n<li>아예 속성처럼 만들 수 있다. (= 계산 속성)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">var</span> bmi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">//getter</span>\n            <span class=\"token keyword\">let</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n            <span class=\"token keyword\">return</span> bmi\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>bmi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//setter</span>\n            weight <span class=\"token operator\">=</span> bmi <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> height <span class=\"token operator\">/</span> <span class=\"token number\">10000</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np2<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">165</span> \np2<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token number\">65</span>  \n\n\np2<span class=\"token punctuation\">.</span>bmi      <span class=\"token comment\">//23.875</span>\np2<span class=\"token punctuation\">.</span>bmi <span class=\"token operator\">=</span> <span class=\"token number\">25</span>    <span class=\"token comment\">//weight 속성 자동 변경(set속성)</span>\n\np2<span class=\"token punctuation\">.</span>weight       <span class=\"token comment\">//68.0625 변경되어 있음</span>\n</code></pre></div>\n<p>밖에서 해당 인스턴스에 접근해서 “set”, 값을 세팅(설정)한다는 의미</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">var</span> bmi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n        <span class=\"token keyword\">return</span> bmi\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>get블록만 있다면, 혹은 set을 쓸 필요가 없다면, 굳이 get{}으로 한번 더 감쌀 필요가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"사람\"</span></span>\n    <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">160.0</span>\n    <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span>\n    \n    <span class=\"token keyword\">var</span> bmi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n            <span class=\"token keyword\">return</span> bmi\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n            weight <span class=\"token operator\">=</span> newValue <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> height <span class=\"token operator\">/</span> <span class=\"token number\">10000</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>set블록의 파라미터를 생략하고 ‘newValue’로 대체가능하지만, 가독성에 좋은지는 잘 모르겠다. (기왕이면 메서드답게 코드 작성하는게… 예외를 두면 더 헷갈림;;;)</p>\n<br/>\n<h3 id=\"계산속성의-특징\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"계산속성의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산속성의 특징</h3>\n<p>메서드가 아닌, 속성방식으로 구현?</p>\n<ul>\n<li>외부에서 보기에 속성이름으로 설정가능하므로 보다 명확해 보임</li>\n<li>계산 속성은 실제 메모리 공간을 가지지 않고, 해당 속성에 접근했을때 다른 속성에 접근해서 계산한후, 그 계산 결과를 리턴하거나 세팅하는 메서드</li>\n</ul>\n<h3 id=\"계산속성의-주의점\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"계산속성의 주의점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산속성의 주의점</h3>\n<ul>\n<li>항상 변하는 값이므로, var로 선언해야함 (let로 선언불가)</li>\n<li>자료형 선언을 해야함(형식추론 형태 안됨) (메서드이기 때문에 파라미터, 리턴형이 필요한 개념)</li>\n<li>get은 반드시 선언 해야함(값을 얻는 것은 필수, 값을 set하는 것은 선택)</li>\n</ul>\n<br/>\n<h3 id=\"타입속성-type-properties\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%86%8D%EC%84%B1-type-properties\" aria-label=\"타입속성 type properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입속성 (Type Properties)</h3>\n<p>static이라는 키워드를 붙여서 사용하는 저장속성이다.</p>\n<ul>\n<li>일반 저장속성은 인스턴스를 생성할때, 생성자에서 모든 속성을 초기화를 완료.</li>\n<li>저장 타입(형식) 속성은 생성자가 따로 없기때문에, 항상 기본값이 필요. 생략할 수 없음.</li>\n<li>반드시 타입(형식)의 이름으로 접근해야한다.</li>\n</ul>\n<h3 id=\"저장-속성-계산-속성-모두-타입속성-가능\" style=\"position:relative;\"><a href=\"#%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1-%EA%B3%84%EC%82%B0-%EC%86%8D%EC%84%B1-%EB%AA%A8%EB%91%90-%ED%83%80%EC%9E%85%EC%86%8D%EC%84%B1-%EA%B0%80%EB%8A%A5\" aria-label=\"저장 속성 계산 속성 모두 타입속성 가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>저장 속성, 계산 속성 모두 타입속성 가능</h3>\n<ol>\n<li>타입-저장 속성</li>\n</ol>\n<p>let과 var모두 선언 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// 저장타입 속성 (값이 항상 있어야 함)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> pi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\">// 인스턴스를 몇개를 찍어내는지 확인</span>\n    \n    <span class=\"token comment\">// 저장 속성</span>\n    <span class=\"token keyword\">var</span> radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>     <span class=\"token comment\">// 반지름</span>\n    \n    <span class=\"token comment\">// 계산 속성</span>\n    <span class=\"token keyword\">var</span> diameter<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// 지름</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n            radius <span class=\"token operator\">=</span> newValue <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n        <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> circle1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>count                      <span class=\"token comment\">//1</span>\n\n<span class=\"token keyword\">var</span> circle2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>count                      <span class=\"token comment\">//2</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>pi\ncircle1<span class=\"token punctuation\">.</span>pi                      <span class=\"token comment\">//안됨</span></code></pre></div>\n<p>이와 비슷한게 애플에서 만들어둔 여러가지 타입들이 해당된다.</p>\n<ul>\n<li>Int.max/Int.min 이런 것들이 다 할당되어 있지만,</li>\n<li>4.min 이런 방식은 존재하지도, 말도 안되기 때문</li>\n</ul>\n<ol start=\"2\">\n<li>타입-계산 속성 (class키워드에서만)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 저장 타입 속성</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> pi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token comment\">// (계산) 타입 속성(read-only), Get생략</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> multiPi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> pi <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 저장 속성</span>\n    <span class=\"token keyword\">var</span> radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>     <span class=\"token comment\">// 반지름</span>\n    \n    \n    <span class=\"token comment\">// 생성자</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>메모리 공간이 할당되어 있지 않음! (메서드 그 자체)</li>\n<li>계속 바뀌는 값이기 때문에 Var만 선언 가능</li>\n</ul>\n<br/>\n<p><strong>Lazy(지연) 속성과 매우 유사한 특징을 갖는다</strong></p>\n<ul>\n<li>지연속성 : 인스턴스가 해당 저장값(value)를 호출할때 사용됨 (only var)</li>\n<li>타입속성 : 특정 인스턴스에 속한 속성이 아니기 때문에 불러올 순 없으나, 타입 자체에서 사용됨. (let, var모두 사용 가능)</li>\n<li>인스턴스 내에서도 접근하려면 타입이름 + 속성으로 써야 접근 가능함!!</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4struct-and-%ED%81%B4%EB%9E%98%EC%8A%A4class\">구조체(struct) and 클래스(class)</a></p>\n<ul>\n<li><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1computd-properties\">계산속성(Computd Properties)</a></li>\n<li><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1%EC%9D%98-%ED%8A%B9%EC%A7%95\">계산속성의 특징</a></li>\n<li><a href=\"#%EA%B3%84%EC%82%B0%EC%86%8D%EC%84%B1%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\">계산속성의 주의점</a></li>\n<li><a href=\"#%ED%83%80%EC%9E%85%EC%86%8D%EC%84%B1-type-properties\">타입속성 (Type Properties)</a></li>\n<li><a href=\"#%EC%A0%80%EC%9E%A5-%EC%86%8D%EC%84%B1-%EA%B3%84%EC%82%B0-%EC%86%8D%EC%84%B1-%EB%AA%A8%EB%91%90-%ED%83%80%EC%9E%85%EC%86%8D%EC%84%B1-%EA%B0%80%EB%8A%A5\">저장 속성, 계산 속성 모두 타입속성 가능</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 17, 2024","title":"iOS스터디 week3, 계산속성과 저장속성","categories":"iOS TIL","author":"ALEX","emoji":"🍎"},"fields":{"slug":"/ios-computed/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://dongckim.github.io","comments":{"utterances":{"repo":"dongckim/dongckim.github.io"}}}}},"pageContext":{"slug":"/ios-extension-init/","nextSlug":"/ios-computed/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}