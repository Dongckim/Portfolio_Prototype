{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/TIL","result":{"pageContext":{"currentCategory":"TIL","categories":["All","iOS","TIL"],"edges":[{"node":{"id":"552137d8-d624-5da4-bd54-072a652417ee","excerpt":"스위프트 컬렉션 데이터를 효율적으로 관리하기 위한 자료형 타입이다. Array : 데이터를 순서대로 저장하는 컬렉션 Dictionary : key: value 하나의 쌍으로 관리 (X순서) Set : X순서, X중복 Array 배열 파이썬에서의  와 많이 유사한 형태이다 배열의 문법 약속 [] 대괄호로 묶는다. 배열의 인덱스의 시작은 0부터 (모든 프로그래밍 언어 공통 사항) 1개의 배열에는 동일한 타입의 데이터만 담을 수 있다. (순서가 있기 때문에) 값은 중복 가능 배열의 기본기능 배열의 각 요소(element)에 대한 접근 서브스크립트를 이용해서 각 요소에 효율적으로 접근할 수 있다. 이 점 또한 파이썬과 매우 유사한 형태 스위프트를 배우면서 제일 많이 느끼는건, 에러처리에 굉장히 쫄아있는(?) 느낌이다. 파이썬에 비하면 정말 과할 정도로 많은 함수를 지원하는데, 공통적으로 모든함수에서, ‘너가 찾으려는 게 없을 수도 있어~‘를 대비하여 옵셔널 처리를 하여 결과값을 보여준다.…","fields":{"slug":"/ios-collection/"},"frontmatter":{"categories":"iOS TIL","title":"iOS스터디 week2, 컬렉션(collection)","date":"July 11, 2024"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":null},{"node":{"id":"f324d5e6-32b3-575f-8752-9fb5f8c101df","excerpt":"기존 파이썬이나 자바스크립트 문법을 알고 있기 때문에, 비슷한 방식의 문법구조와 관련된 건 스킵하기로 했다. 다만 Swift에서 꼭 알아야만 하는 문법과 이 언어의 특징과 같은 문법들은 꼼꼼하게 되짚어보자. (사실 이게 더 어려움;;) 1. inout 입출력 파라미터 함수를 통해, 변수를 직접 수정하고 싶은 경우, 함수내의 파라미터는 기본적으로 복사되어 전달되는 값타입(str, string, Int…)이며, 임시상수이기 때문에 변경 불가가 원칙임. 뭐 파이썬처럼 생각해보면 맞지 않을까? 라는 의문이 들 수 있는게 당연하다 (일단 나부터 개추;;) 실제로는 이 코드는 에러블록을 띄우는데, a와 b는 파라미터이기 때문에, 전역변수 scope에 있던 변수들이 복사되어 전달된다 (직접 쓰인다 정도로 이해하면 될 듯) 따라서, 원본이 전달되기 때문에 전역변수의 값이 변경되어서는 안되는 변경 불가가 원칙이다. 이 예시를 보면 파라미터 앞에 inout 키워드를 쓰게되면, 이는 직접 전달 방식보…","fields":{"slug":"/gatsby-github-blog/"},"frontmatter":{"categories":"iOS TIL","title":"inout 입출력 파라미터, gaurd문, 옵셔널 바인딩","date":"July 10, 2024"}},"next":null,"previous":{"fields":{"slug":"/ios-collection/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}